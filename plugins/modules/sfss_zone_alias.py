#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Dell Inc. or its subsidiaries. All Rights Reserved
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################
"""
The module file for sfss_zone_alias
"""
from __future__ import absolute_import, division, print_function
__metaclass__ = type

DOCUMENTATION = """
---
module: sfss_zone_alias
version_added: 1.0.0
notes:
- Idempotent is supported.
- Supports C(check_mode).
short_description: Manage aliases for SFSS zones
description:
  - This module is used to manage aliases for SFSS zones and zone members. This module is used to define a friendly name for the zone.
author: Mohamed Javeed (@javeedf)
options:
  config:
    description: A list of SFSS zone aliases.
    type: list
    elements: dict
    suboptions:
      instance_id:
        description:
          - Instance ID.
        type: int
        required: True
      name:
        description:
          - Name of the zone alias.
        type: str
        required: True
      members:
        description:
          - Name of the zone members.
        type: dict
        suboptions:
          data:
            description:
            - Member information.
            type: list
            elements: dict
            suboptions:
              id:
                description:
                  - Endpoint ID, for endpoints such as hosts, subsystems, or direct discovery controllers (DDCs).
                type: str
                required: True
              type:
                description:
                  - Endpoint ID type NQN or FQN.
                type: str
                choices:
                - nqn
                - fqn
                default: nqn
              role:
                description:
                  - Endpoint role Host, subsystem, or DDC.
                type: str
                required: True
                choices:
                - host
                - subsystem
                - ddc

  state:
    description:
      - The state the configuration should be left in.
    type: str
    choices:
     - merged
     - deleted
    default: merged
"""
EXAMPLES = """
# Using deleted
#
# Before state:
# -------------
#
#redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias?$source=config&$expand=ZoneAlias
# "ZoneAlias": [
# {
#   "NumberZoneMembers": "2",
#   "ZoneAliasMembers": [
#       "config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002",
#       "config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002"
#   ],
#   "ZoneAliasName": "zone_alais3",
#   "ZoneAliasId": "config:zone_alais3",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')",
#   "@odata.type": "#ZoneAlias.ZoneAlias",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/$metadata#ZoneAlias/ZoneAlias/$entity"
# },
# {
#   "NumberZoneMembers": "3",
#   "ZoneAliasMembers": [
#       "config:zone_alais1:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002",
#       "config:zone_alais1:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#       "config:zone_alais1:nqn3.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002"
#   ],
#   "ZoneAliasName": "zone_alais1",
#   "ZoneAliasId": "config:zone_alais1",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais1')",
#   "@odata.type": "#ZoneAlias.ZoneAlias",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/$metadata#ZoneAlias/ZoneAlias/$entity"
# },
# {
#   "ZoneAliasId": "config:zone_alais4",
#   "ZoneAliasName": "zone_alais4",
#   "NumberZoneMembers": "0",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais4')",
#   "@odata.type": "#ZoneAlias.ZoneAlias",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/$metadata#ZoneAlias/ZoneAlias/$entity"
# },
# {
#   "NumberZoneMembers": "2",
#   "ZoneAliasMembers": [
#       "config:zone_alais2:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#       "config:zone_alais2:nqn2.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002"
#   ],
#   "ZoneAliasName": "zone_alais2",
#   "ZoneAliasId": "config:zone_alais2",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais2')",
#   "@odata.type": "#ZoneAlias.ZoneAlias",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/$metadata#ZoneAlias/ZoneAlias/$entity"
# }
# ]
#redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/ZoneAliasMembers?$source=config&$expand=ZoneAliasMembers
# "ZoneMembers": [
# {
#   "Role": "Host",
#   "ZoneMemberType": "FullQualifiedName",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# },
# {
#   "Role": "Subsystem",
#   "ZoneMemberType": "NQN",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# }
# ]

- name: Stfs zones alias create
  dellemc.sfss.zone_alias:
    config:
    - name: zone_alais3
      instance_id: 1
      members:
        data:
          - id: "nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002"
            type: 'nqn'
            role: 'subsystem'
    state: deleted

#
# After state:
# -------------
#
#redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/ZoneAliasMembers?$source=config&$expand=ZoneAliasMembers
# "ZoneMembers": [
# {
#   "Role": "Host",
#   "ZoneMemberType": "FullQualifiedName",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# }
# ]
# Using deleted
#
# Before state:
# -------------
#
#redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias?$source=config&$expand=ZoneAlias
# "ZoneAlias": [
# {
#   "NumberZoneMembers": "2",
#   "ZoneAliasMembers": [
#       "config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002",
#       "config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002"
#   ],
#   "ZoneAliasName": "zone_alais3",
#   "ZoneAliasId": "config:zone_alais3",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')",
#   "@odata.type": "#ZoneAlias.ZoneAlias",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/$metadata#ZoneAlias/ZoneAlias/$entity"
# },
# {
#   "NumberZoneMembers": "3",
#   "ZoneAliasMembers": [
#       "config:zone_alais1:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002",
#       "config:zone_alais1:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#       "config:zone_alais1:nqn3.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002"
#   ],
#   "ZoneAliasName": "zone_alais1",
#   "ZoneAliasId": "config:zone_alais1",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais1')",
#   "@odata.type": "#ZoneAlias.ZoneAlias",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/$metadata#ZoneAlias/ZoneAlias/$entity"
# },
# {
#   "ZoneAliasId": "config:zone_alais4",
#   "ZoneAliasName": "zone_alais4",
#   "NumberZoneMembers": "0",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais4')",
#   "@odata.type": "#ZoneAlias.ZoneAlias",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/$metadata#ZoneAlias/ZoneAlias/$entity"
# },
# {
#   "NumberZoneMembers": "2",
#   "ZoneAliasMembers": [
#       "config:zone_alais2:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#       "config:zone_alais2:nqn2.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002"
#   ],
#   "ZoneAliasName": "zone_alais2",
#   "ZoneAliasId": "config:zone_alais2",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais2')",
#   "@odata.type": "#ZoneAlias.ZoneAlias",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/$metadata#ZoneAlias/ZoneAlias/$entity"
# }
# ]
- name: Stfs zones alias create
  dellemc.sfss.zone_alias:
    config: []
    state: deleted

#
# After state:
# -------------
#
#redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias?$source=config&$expand=ZoneAlias
# {
#   "ZoneAlias@odata.count": 0,
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias?$source=config&$expand=ZoneAlias",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/$metadata#ZoneAlias",
#   "@odata.type": "#ZoneAliasCollection.ZoneAliasCollection"
# }

# Using merged
#
# Before state:
# -------------
#
#redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/ZoneAliasMembers?$source=config&$expand=ZoneAliasMembers
# "ZoneMembers": [
# {
#   "Role": "Host",
#   "ZoneMemberType": "FullQualifiedName",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# }
# ]

- name: Stfs zones alias create
  dellemc.sfss.zone_alias:
    config:
    - name: zone_alais3
      instance_id: 1
      members:
        data:
          - id: "nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002"
            type: 'nqn'
            role: 'subsystem'


#
# After state:
# ------------
#redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/ZoneAliasMembers?$source=config&$expand=ZoneAliasMembers

# "ZoneMembers": [
# {
#   "Role": "Host",
#   "ZoneMemberType": "FullQualifiedName",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# },
# {
#   "Role": "Subsystem",
#   "ZoneMemberType": "NQN",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# }
# ]

# Using merged
#
# Before state:
# -------------
#
#redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/ZoneAliasMembers?$source=config&$expand=ZoneAliasMembers
# "ZoneMembers": [
# {
#   "Role": "Host",
#   "ZoneMemberType": "FullQualifiedName",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# },
# {
#   "Role": "Subsystem",
#   "ZoneMemberType": "NQN",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# }
# ]
- name: Stfs zones alias create
  dellemc.sfss.zone_alias:
    config:
    - name: Ansible123
      instance_id: 1
      members:
        data:
          - id: "nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002"
            type: 'nqn'
            role: 'host'

#
# After state:
# ------------
#redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/ZoneAliasMembers?$source=config&$expand=ZoneAliasMembers

# "ZoneMembers": [
# {
#   "Role": "Host",
#   "ZoneMemberType": "FullQualifiedName",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn1.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:4.3.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# },
# {
#   "Role": "Host",
#   "ZoneMemberType": "NQN",
#   "ZoneAliasMemberId": "config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002",
#   "@odata.id": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')
# /ZoneAliasMembers('config:zone_alais3:nqn.2014-08.org.nvmexpress:uuid:host:TCP:Ipv4:1.1.1.1:3002')",
#   "@odata.type": "#ZoneAliasMembers.ZoneAliasMembers",
#   "@odata.context": "/redfish/v1/SFSS/1/ZoneDBs('config')/ZoneAlias('config:zone_alais3')/$metadata#ZoneAliasMembers/ZoneAliasMembers/$entity"
# }
# ]
"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
  type: list

after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
  type: list

commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.dellemc.sfss.plugins.module_utils.network.sfss.argspec.zone_alias.zone_alias import Zone_aliasArgs
from ansible_collections.dellemc.sfss.plugins.module_utils.network.sfss.config.zone_alias.zone_alias import Zone_alias


def main():
    """
    Main entry point for module execution
    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=Zone_aliasArgs.argument_spec,
                           supports_check_mode=True)
    result = Zone_alias(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
