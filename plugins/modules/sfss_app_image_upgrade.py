#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2021 Dell Inc. or its subsidiaries. All Rights Reserved
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for sfss_app_image_upgrade
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

DOCUMENTATION = """
---
module: sfss_app_image_upgrade
version_added: 1.0.0
notes:
- Idempotent is supported.
- Supports C(check_mode).
short_description: Upgrade or downgrade SFSS APP
description:
  - This module is used to upgrade or downgrade SFSS application to the specified image version.
author: Mohamed Javeed (@javeedf)
options:
  config:
    description: A list of images.
    type: dict
    suboptions:
      image_version:
        description:
          - Image version to upgrade to.
        type: str
  state:
    description:
      - The state the configuration should be left in.
    type: str
    choices:
     - merged
    default: merged
"""
EXAMPLES = """
# Using merged
#
# Before state:
# -------------
#
# GET redfish/v1/SFNCApp
# {
#     "DeploymentModel": "StandAlone",
#     "Version": "1.0.0.3",
#     "@odata.id": "/redfish/v1/SFNCApp",
#     "@odata.type": "#SFNCApp.SFNCApp",
#     "@odata.context": "/redfish/v1/$metadata#SFNCApp/SFNCApp/$entity"
# }
- name: SFSS Image upgrade process started ...
  dellemc.sfss.sfss_app_image_upgrade:
   config:
    image_version: 1.0.0.4
  register: image_upgrade_result
#
# After state:
# -------------
#
# GET redfish/v1/SFNCApp
# {
#     "DeploymentModel": "StandAlone",
#     "Version": "1.0.0.4",
#     "@odata.id": "/redfish/v1/SFNCApp",
#     "@odata.type": "#SFNCApp.SFNCApp",
#     "@odata.context": "/redfish/v1/$metadata#SFNCApp/SFNCApp/$entity"
# }


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: ['image_version: 1.0.0.4']
  type: list

after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: ['image_version: 1.0.0.4']
  type: list

commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.dellemc.sfss.plugins.module_utils.network.sfss.argspec.app_image_upgrade.app_image_upgrade import App_image_upgradeArgs
from ansible_collections.dellemc.sfss.plugins.module_utils.network.sfss.config.app_image_upgrade.app_image_upgrade import App_image_upgrade


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=App_image_upgradeArgs.argument_spec,
                           supports_check_mode=True)

    result = App_image_upgrade(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
